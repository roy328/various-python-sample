import os
import sqlite3
from natsort import natsorted
from PIL import Image
import math

# Connect to the SQLite database
connection = sqlite3.connect('signals.db')
cursor = connection.cursor()

# Specify the directory containing the images
image_directory = 'images/images_AB_8ed_2024'
image_filenames = sorted(os.listdir(image_directory))  # Get sorted list of image filenames
sorted_files = natsorted(image_filenames)

# Corresponding numero_ministeriale values for the images
# numero_ministeriale_list = [
#     '01007', '01006', '01005', '01004', '01003', '01002', '01001',  
#     '01014', '01013', '01012', '01011', '01010', '01009', '01008',
#     '01021' ,'01020' ,'01019' ,'01018' ,'01017' ,'01016' ,'01015',
#     '01028' ,'01027' ,'01026' ,'01025' ,'01024' ,'01023' ,'01022',
#     '01035' ,'01034' ,'01033' ,'01032' ,'01031' ,'01030' ,'01029',
#     '01042' ,'01041' ,'01040' ,'01039' ,'01038' ,'01037' ,'01036',
#     '02007' ,'02006' ,'02005' ,'02004' ,'02003' ,'02002' ,'02001',
#     '02015' ,'02014' ,'02013' ,'02012' ,'02011' ,'02010' ,'02009', '02008',
#     '02022' ,'02021' ,'02020' ,'02019' ,'02018' ,'02017' ,'02016',
#     '02030' ,'02029' ,'02028' ,'02027' ,'02026' ,'02025' ,'02024', '02023',
#     '02038' ,'02037' ,'02036' ,'02035' ,'02034' ,'02033' ,'02032', '02031',
#     '02046' ,'02045' ,'02044' ,'02043' ,'02042' ,'02041' ,'02040', '02039',
#     '02054' ,'02053' ,'02052' ,'02051' ,'02050' ,'02049' ,'02048', '02047',
#     '02056' ,'02055' 
#     '03006' ,'03005' ,'03004' ,'03003' ,'03002' ,'03001' ,
#     '03013' ,'03012' ,'03011' ,'03010' ,'03009' ,'03008' ,'03007',
#     '03020' ,'03019' ,'03018' ,'03017' ,'03016' ,'03015' ,'03014',
#     '03026' ,'03025' ,'03023' ,'03022' ,'03021' ,
#     '03033' ,'03032' ,'03029' ,'03028' ,
#     '03041' ,'03040' ,'03039' ,'03038' ,'03037' ,'03036' ,'03035',
#     '03046' ,'03045' ,'03044' ,'03043' ,'03042' ,
#     '04007' ,'04006' ,'04005' ,'04004' ,'04003' ,'04002' ,'04001',
#     '04014' ,'04013' ,'04012' ,'04011' ,'04010' ,'04009' ,'04008',
#     '04016' ,'04015'
# ]    # For AM_2015

# numero_ministeriale_list = [
#     '012018', '012016', '012012', '012008', '012006', '012004', '012002',  
#     '012029', '012027', '012025', '012024', '012023', '012020', '012019', 
#     '012043', '012041', '012038', '012036', '012035', '012031', '012030', 
#     '012052', '012051', '012049', '012046', '012045', 
#     '023009', '023008', '023007', '023006', '023003', '023002', '023001', 
#     '023031', '023030', '023027', '023026', '023025', '023016', '023014', '023012',
#     '023042', '023041', '023038', '023037', '023035', '023034', '023032', 
#     '024010', '024009', '024008', '024005', '024003', '024002', '024001', '023043', 
#     '024025', '024023', '024021', '024020', '024018', '024016', '024015', '024012', 
#     '024039', '024038', '024037', '024031', '024029', '024028', '024027', '024026', 
#     '035012', '035011', '035007', '035006', '035003', '035002', '035001', 
#     '035019', '035018', '035017', '035016', '035015', '035014', '035013', 
#     '046015', '046013', '046011', '046010', '046005', '046003', '046002', '046001',
#     '046024', '046023', '046022', '046020', '046019', '046018',
#     '046029', '046028', '046027', '046026', '046025', 
#     '047010', '047006', '047004', '047003', '047002', '047001', '046030', 
#     '047021', '047020', '047016', '047015', '047014', '047013', '047011', 
#     '047023', '047022',  
#     '0513017', '0513016', '0513014',
#     '0513020', '0513019', '0513018',
#     '0513023', '0513022', '0513021',
#     '0816008',
#     '142006',
#     '179004'
# ] # For C_CE_2016

# numero_ministeriale_list = [
#     '0301001 (1 3)',
#     '0305001 (1 3)','0303004 (1 3)', 
#     '0305016 (1 3)', '0305011 (1 3)', '0305009 (1 3)', '0305007 (1 3)', '0305005 (1 3)', '0305003 (1 3)',   
#     '0305030 (1 3)', '0305029 (1 3)', '0305028 (1 3)', '0305024 (1 3)', '0305023 (1 3)', '0305022 (1 3)', '0305019 (1 3)', 
#     '0305014 (1 3 5 6)', '0305013 (1 3 5 6)', '0305012 (1 3 5 6)', '0305037 (1 3)', '0305033 (1 3)', '0305032 (1 3)', 
#     '0305021 (1 3 5 6)', '0305020 (1 3 5 6)', '0305015 (1 3 5 6)', 
#     '0305031 (1 3 5 6)', '0305027 (1 3 5 6)', '0305026 (1 3 5 6)', '0305025 (1 3 5 6)', 
#     '0305018 (5 6)', '0305017 (5 6)', '0305010 (5 6)', '0305008 (5 6)', '0305006 (5 6)', '0305004 (5 6)', '0305002 (5 6)', 
#     '0305036 (5 6)', '0305035 (5 6)', '0305034 (5 6)', 
#     '0901004 (1 2 3)', 
#     '1502009 (3 4 6 7)', '1502008 (3 4 6 7)', '1502007 (3 4 6 7)', '1502006 (3 4 6 7)', '1502005 (3 4 6 7)', '1502004 (3 4 6 7)', '1502003 (3 4 6 7)', '1502002 (3 4 6 7)', 
#     '1502016 (3 4 6 7)', '1502015 (3 4 6 7)', '1502014 (3 4 6 7)', '1502013 (3 4 6 7)', '1502012 (3 4 6 7)', '1502011 (3 4 6 7)', '1502010 (3 4 6 7)', 
#     '1502018 (3 4 6 7)', '1502017 (3 4 6 7)'
# ] # For C1_C1E_NP_2016

numero_ministeriale_list = [
    # '01003', '01002', '01001', 
    # '01029', 
    # '02002', '02001',  
    # '02004', '02003', 
    # '02007', '02006', '02005', 
    # '02008', 
    # '02010', '02009', 
    # '02012', '02011', 
    # '02014', '02013', 
    # '02015', 
    # '02017', '02016',  
    # '02019', '02018', 
    # '02021', '02020', 
    # '02022', 
    # '02024', '02023',  
    # '02026', '02025',  
    # '02029', '02028', '02027', 
    # '02031', '02030',  
    # '02033', '02032', 
    # '02035', '02034', 
    # '02036',  
    # '02039', '02038', '02037', 
    # '02041', '02040', 
    # '02042',  
    # '02044', '02043', 
    # '02046', '02045', 
    # '02049', '02048', '02047', 
    # '02050',  
    # '02052', '02051', 
    # '02054', '02053', 
    # '03002', '03001', 
    # '03004', '03003', 
    # '03006', '03005',  
    # '03009', '03008', '03007', 
    # '03010',
    # '03013', '03012', '03011', 
    # '03015', '03014',  
    # '03018', '03017', '03016', 
    # '03020', '03019', 
    # '03023', '03022', '03021', 
    # '03025', '03024', 
    # '03027', '03026', 
    # '03030', '03029', '03028', 
    # '03032', '03031',  
    # '03034', '03033', 
    # '03036', '03035',  
    # '03038', '03037',  
    # '03040', '03039', 
    # '03042', '03041',  
    # '03045', '03044', '03043',  
    # '04002', '04001', 
    # '04005', '04004', '04003', 
    # '04007', '04006',   
    # '04009', '04008', 
    # '04012', '04011', '04010', 
    # '04014', '04013',   
    # '04017', '04016', '04015', 
    # '04020', '04019', '04018', 
    # '04023', '04022', '04021',  
    # '04025', '04024',  
    # '04027', '04026',  
    # '04030', '04029', '04028',  
    '04032', '04031', 
    '04035', '04034', '04033', 
    '04038', '04037', '04036',  
    '04040', '04039', 
    '05002', '05001',  
    '05004', '05003',   
    '05006', '05005', 
    '05008', '05007',  
    '05010', '05009',   
    '05013', '05012', '05011', 
    '05015', '05014', 
    '05017', '05016',  
    '05019', '05018', 
    '05020',
    '06003', '06002', '06001', 
    '06006', '06005', '06004',  
    '06009', '06008', '06007', 
    '06013', '06012', '06011', '06010',
    '06016', '06015', '06014', 
    '06018', '06017', 
    '06022', '06021', '06020', '06019',
    '06025', '06024', '06023', 
    '06027', '06026',  
    '06030', '06029', '06028',  
    '07003', '07002', '07001', 
    '07006', '07005', '07004', 
    '07009', '07008', '07007', 
    '07013', '07012', '07011', '07010', 
    '07016', '07015', '07014', 
    '07019', '07018', '07017', 
    '07021', '07020',  
    '07023', '07022', 
    '08003', '08002', '08001', 
    '08007', '08005', '08004', 
    '08010', '08009', '08008', 
    '08014', '08013', '08012',  
    '08016', '08015', 
    '08024', '08021', '08020', 
    '08030', '08029', '08028', 
    '08032', '08031',   
    '08037', '08034', '08033', 
    '08042', '08040', '08039', '08038',
    '08044', '08043',
    '08048', '08046', '08045',  
    '08052', '08051', '08049', 
    '08055', '08054', '08053', 
    '08061', '08057',  
    '08063', 
    '09003', '09002', '09001', 
    '09006', '09005', '09004', 
    '09009', '09008', '09007', 
    '09012', '09011', '09010',  
    '09015', '09014', '09013', 
    '09018', '09017', '09016', 
    '09019', 
    '10002', '10001',  
    '10004', '10003',  
    '10005',  
    '10006',  
    '10008', '10007',  
    '10009',  
    '10011', '10010', 
    '10013', '10012',  
    '10015', '10014',  
    '10017', '10016',  
    '10019', '10018', 
    '10022', '10021', '10020', 
    '10025', '10024', '10023', 
    '11012',  
    '13001', 
    '13005', 
    '13014',  
    '13016',  
    '13018', '13017',  
    '13020', '13019', 
    '13022', '13021',
    '13023', 
    '13035', 
    '14003', '14002', '14001', 
    '14005', '14004',  
    '14008', '14007', '14006', 
    '14010', '14009',  
    '14012', '14011', 
    '14016', '14015', '14014', '14013',
    '14018', '14017',  
    '14020', '14019', 
    '14023', '14022', '14021', 
    '14025', '14024', 
    '14028', '14027', '14026', 
    '14031', '14030', '14029', 
    '14034', '14033', '14032', 
    '14040', '14039', '14038', '14037', '14036', '14035', 
    '14043', '14042', '14041', 
    '14046', '14045', '14044', 
    '14049', '14048', '14047', 
    '16008', 
    '17020', '17019', 
    '17021', 
    '17035', 
    '18011', '18010', '18009', 
    '18012',  
    '18019', '18018', 
    '18022', '18021', '18020', 
    '21011'
] 

num_len = len(numero_ministeriale_list)
# Iterate over images and update database

print(num_len)
def calculate_mean_and_std(image_path):
    img = Image.open(image_path)
    img = img.convert("RGB")  # Ensure image is in RGB format

    total_r = total_g = total_b = 0
    total_r_sq = total_g_sq = total_b_sq = 0
    width, height = img.size
    total_pixels = width * height

    # Sum up all pixel values
    for x in range(width):
        for y in range(height):
            r, g, b = img.getpixel((x, y))
            total_r += r 
            total_g += g 
            total_b += b 

            total_r_sq += r ** 2
            total_g_sq += g ** 2
            total_b_sq += b ** 2

    # Calculate mean values
    mean_rgb = (total_r // total_pixels, total_g // total_pixels, total_b // total_pixels)

    # Calculate standard deviation
    std_r = math.sqrt((total_r_sq / total_pixels) - (mean_rgb[0] ** 2))
    std_g = math.sqrt((total_g_sq / total_pixels) - (mean_rgb[1] ** 2))
    std_b = math.sqrt((total_b_sq / total_pixels) - (mean_rgb[2] ** 2))

    return mean_rgb, (std_r, std_g, std_b)

for i, image_filename in enumerate(sorted_files):
    if not image_filename.endswith('.png'):
        continue  # Skip non-PNG files

    print("number", i, num_len)
    # Get corresponding numero_ministeriale
    if i < num_len:
        numero_ministeriale = numero_ministeriale_list[i]
    else:
        print("Warning: Not enough numero_ministeriale values for the number of images!")
        break

    image_path = os.path.join(image_directory, image_filename)

    # Calculate the average RGB values
    mean_rgb, std_rgb = calculate_mean_and_std(image_path)

    # Update the database with the calculated RGB values
    cursor.execute('''
    UPDATE traffic_signals 
    SET image_R = ?, image_G = ?, image_B = ?, image_path = ? 
    WHERE numero_ministeriale = ?
    ''', (int(std_rgb[0]), int(std_rgb[1]), int(std_rgb[2]), image_path, numero_ministeriale))

# Commit the changes and close the connection
connection.commit()
cursor.close()
connection.close()

print("Database updated successfully!")
